1. Nilesh Gupta

2. 
Sleeper's PID is: 4712
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!
Slept for 4 iterations!
Slept for 5 iterations!
Slept for 6 iterations!
Slept for 7 iterations!
Slept for 8 iterations!
^C

3. the numeric value of SIGINT is 2

4. The process was terminated 

5. I chose SIGTERM (15) - kill -s TERM 5107 

Sleeper's PID is: 5107
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!
Slept for 4 iterations!
Slept for 5 iterations!
Slept for 6 iterations!
Slept for 7 iterations!
Slept for 8 iterations!
Slept for 9 iterations!
Slept for 10 iterations!
Slept for 11 iterations!
Slept for 12 iterations!
Slept for 13 iterations!
zsh: terminated  ./sleep

6. 
Forking sleeper...
Waiting for sleeper 5221...
Sleeper's PID is: 5221
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!
Slept for 4 iterations!
Slept for 5 iterations!
Slept for 6 iterations!
^C

It seem slike both programs were terminated and the calling program was successful. 

7. 
void ignore_sigint(int signum) {
    printf("Ignoring SIGINT (Ctrl+C) in caller!\n");
}

int main(int argc, char* argv[]) {
    signal(SIGINT, ignore_sigint); // Register handler
    pid_t ret = fork();

    if (ret == -1) {
        perror("Could not fork");
        exit(-1);
    } 

    if (ret == 0) { // Child
        char* cmd = "./sleep";
        char* myargv[] = {"sleep", NULL};
        execvp(cmd, myargv);
        perror("execvp failed");
        exit(-1);
    }

    printf("Waiting for sleeper %d...\n", ret);
    waitpid(ret, NULL, 0);
    printf("Parent finished waiting!\n");
    return 0;
}

8. 
Waiting for sleeper 11261...
Sleeper's PID is: 11261
Slept for 0 iterations!
Slept for 1 iterations!
Slept for 2 iterations!
Slept for 3 iterations!
^CIgnoring SIGINT (Ctrl+C) in caller!
Parent finished waiting!

9. When you're downloading a large file and suddenly press CTRL-C, your web browser or download manager 
catches the SIGINT signal to safely stop the download. Instead of just disappearing, it first cleans up by removing 
the partial file and freeing up disk space. This prevents half-downloaded files from cluttering your computer 
when you cancel transfers.

10. When you press CTRL-C in an empty terminal, nothing happens because the shell intentionally 
ignores it to stop accidental termination of the shell session. This behavior is important for 
usability, ensuring users donâ€™t lose their shell (and background processes) due to a stray keystroke. 

BONUS 1 ^